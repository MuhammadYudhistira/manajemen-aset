// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SEKWAN
  KEPALA_BAGIAN
  STAFF
  GUEST
}

enum Jenis_Aset {
  Peralatan
  Kendaraan
}

enum Status_Aset {
  Available
  Inactive
  Damaged
  Under_Maintenance
  Request_Deletion
  Deletion_Accepted
}

enum Status_laporan {
  Reported
  Approved
  Rejected
}

enum Status_perbaikan {
  Reported
  Approved
  Rejected
  In_progress
  Completed
}

enum Jenis_Kelamin {
  Pria
  Wanita
}

model User {
  nip               String              @id @db.VarChar(18)
  nama              String              @db.VarChar(100)
  password          String
  image             String?
  jenis_kelamin     Jenis_Kelamin
  alamat            String?
  no_hp             String?             @db.VarChar(18)
  role              Role                @default(GUEST)
  Penanggung_Jawab  Penanggung_Jawab[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Laporan_Kerusakan Laporan_Kerusakan[]
  Perbaikan         Perbaikan[]

  @@map("users")
}

model Lokasi {
  id          Int           @id @default(autoincrement())
  nama_lokasi String        @db.VarChar(100)
  Detail_Aset Detail_Aset[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("lokasi")
}

model Aset {
  kode_barang      String             @id @db.VarChar(20)
  nama_barang      String             @unique @db.VarChar(100)
  jenis_barang     Jenis_Aset         @default(Peralatan)
  image            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Detail_Aset      Detail_Aset[]
  Detail_Pengadaan Detail_Pengadaan[]

  @@map("asets")
}

model Pengadaan {
  nomor_pengadaan   String             @id @db.VarChar(30)
  nama_vendor       String
  tanggal_pengadaan DateTime
  dokumen_pengadaan String
  Detail_Pengadaan  Detail_Pengadaan[]
  Detail_Aset       Detail_Aset[]

  @@map("pengadaan")
}

model Detail_Pengadaan {
  id_detail_pengadaan String    @id
  kode_barang         String    @db.VarChar(20)
  nomor_pengadaan     String    @db.VarChar(30)
  aset                Aset      @relation(references: [kode_barang], fields: [kode_barang], onDelete: Cascade, onUpdate: Cascade)
  pengadaan           Pengadaan @relation(references: [nomor_pengadaan], fields: [nomor_pengadaan], onDelete: Cascade, onUpdate: Cascade)
  jumlah_barang       Int
  total_harga         Int

  @@map("detail_pengadaan")
}

model Detail_Aset {
  kode_detail                       String                          @id @db.VarChar(25)
  kode_barang                       String                          @db.VarChar(20)
  nomor_pengadaan                   String?                         @db.VarChar(30)
  id_lokasi                         Int
  merk                              String?                         @db.VarChar(50)
  ukuran                            String?                         @db.VarChar(50)
  harga_satuan                      Int
  tahun_perolehan                   DateTime?
  status                            Status_Aset                     @default(Available)
  keterangan                        String?
  createdAt                         DateTime                        @default(now())
  updatedAt                         DateTime                        @updatedAt
  aset                              Aset                            @relation(references: [kode_barang], fields: [kode_barang], onDelete: Cascade, onUpdate: Cascade)
  pengadaan                         Pengadaan?                      @relation(references: [nomor_pengadaan], fields: [nomor_pengadaan], onDelete: Cascade, onUpdate: Cascade)
  lokasi                            Lokasi?                         @relation(references: [id], fields: [id_lokasi], onDelete: Cascade, onUpdate: Cascade)
  Penanggung_Jawab                  Penanggung_Jawab[]
  Detail_Aset_Images                Detail_Aset_Images[]
  Laporan_Kerusakan                 Laporan_Kerusakan[]
  Pengajuan_Penghapusan_Detail_Aset Detail_Penghapusan_Nilai_Aset[]
  Aset_Kendaraan                    Aset_Kendaraan?

  @@map("detail_aset")
}

model Aset_Kendaraan {
  kode_detail  String      @unique
  nomor_rangka String?     @db.VarChar(100)
  nomor_mesin  String?     @db.VarChar(100)
  nomor_polisi String?     @db.VarChar(100)
  nomor_bpkb   String?     @db.VarChar(100)
  detail_aset  Detail_Aset @relation(fields: [kode_detail], references: [kode_detail], onDelete: Cascade, onUpdate: Cascade)
}

model Detail_Aset_Images {
  id          Int         @id @default(autoincrement())
  link        String
  kode_detail String
  detail_aset Detail_Aset @relation(fields: [kode_detail], references: [kode_detail], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("detail_aset_images")
}

model Penanggung_Jawab {
  id          String      @id @default(uuid())
  id_user     String
  kode_detail String
  user        User        @relation(fields: [id_user], references: [nip], onDelete: Cascade, onUpdate: Cascade)
  detail_aset Detail_Aset @relation(fields: [kode_detail], references: [kode_detail], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([id_user, kode_detail])
  @@map("penanggung_jawab")
}

model Laporan_Kerusakan {
  id            String         @id @default(uuid())
  perihal       String
  deskripsi     String         @db.LongText
  image         String
  approved_by   String?        @db.VarChar(100)
  approved_date DateTime?
  status        Status_laporan @default(Reported)
  keterangan    String?        @db.LongText
  id_user       String
  kode_detail   String
  user          User           @relation(fields: [id_user], references: [nip], onDelete: Cascade, onUpdate: Cascade)
  detail_aset   Detail_Aset    @relation(fields: [kode_detail], references: [kode_detail], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Perbaikan     Perbaikan?

  @@map("laporan_kerusakan")
}

model Perbaikan {
  id                String             @unique
  id_requested_by   String
  hal               String             @db.LongText
  biaya_perbaikan   Int
  nomor_rekening    String             @db.VarChar(100)
  approved_by       String?            @db.VarChar(100)
  approved_date     DateTime?
  faktur            String?
  kuitansi          String?
  berita_acara      String?
  status            Status_perbaikan   @default(Reported)
  keterangan        String?            @db.LongText
  laporan_kerusakan Laporan_Kerusakan  @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Perbaikan_Images  Perbaikan_Images[]
  user              User               @relation(fields: [id_requested_by], references: [nip])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("perbaikan")
}

model Perbaikan_Images {
  id           String    @id @default(uuid())
  link         String
  perbaikan    Perbaikan @relation(fields: [id_perbaikan], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_perbaikan String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("perbaikan_images")
}

model Penghapusan_Nilai_aset {
  id                            String                          @id @default(uuid())
  title                         String                          @db.VarChar(200)
  alasan_penghapusan            String                          @db.LongText
  status                        Status_Pengajuan_Penghapusan    @default(Pending)
  keterangan                    String?                         @db.LongText
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @updatedAt
  Detail_Penghapusan_Nilai_Aset Detail_Penghapusan_Nilai_Aset[]

  @@map("penghapusan_nilai_aset")
}

enum Status_Pengajuan_Penghapusan {
  Pending
  Accepted
  Rejected
}

enum Status_Penghapusan {
  Pending
  Accepted
  Rejected
}

model Detail_Penghapusan_Nilai_Aset {
  id                    String                 @id @default(uuid())
  id_penghapusan        String
  kode_detail           String
  pengajuan_penghapusan Penghapusan_Nilai_aset @relation(fields: [id_penghapusan], references: [id], onDelete: Cascade, onUpdate: Cascade)
  detail_aset           Detail_Aset            @relation(fields: [kode_detail], references: [kode_detail], onDelete: Cascade, onUpdate: Cascade)
  // status                Status_Penghapusan     @default(Pending)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  @@unique([id_penghapusan, kode_detail])
  @@map("detail_penghapusan_nilai_aset")
}
